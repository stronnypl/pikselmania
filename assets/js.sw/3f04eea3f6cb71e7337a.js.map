{"version":3,"sources":["webpack://modern-prestashop-build-tool/./node_modules/swiper/modules/mousewheel/mousewheel.js"],"names":[],"mappings":"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","file":"js/3f04eea3f6cb71e7337a.js","sourcesContent":["/* eslint-disable consistent-return */\nimport { getWindow } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nimport { now, nextTick } from '../../shared/utils.js';\nexport default function Mousewheel(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const window = getWindow();\n  extendParams({\n    mousewheel: {\n      enabled: false,\n      releaseOnEdges: false,\n      invert: false,\n      forceToAxis: false,\n      sensitivity: 1,\n      eventsTarget: 'container',\n      thresholdDelta: null,\n      thresholdTime: null\n    }\n  });\n  swiper.mousewheel = {\n    enabled: false\n  };\n  let timeout;\n  let lastScrollTime = now();\n  let lastEventBeforeSnap;\n  const recentWheelEvents = [];\n\n  function normalize(e) {\n    // Reasonable defaults\n    const PIXEL_STEP = 10;\n    const LINE_HEIGHT = 40;\n    const PAGE_HEIGHT = 800;\n    let sX = 0;\n    let sY = 0; // spinX, spinY\n\n    let pX = 0;\n    let pY = 0; // pixelX, pixelY\n    // Legacy\n\n    if ('detail' in e) {\n      sY = e.detail;\n    }\n\n    if ('wheelDelta' in e) {\n      sY = -e.wheelDelta / 120;\n    }\n\n    if ('wheelDeltaY' in e) {\n      sY = -e.wheelDeltaY / 120;\n    }\n\n    if ('wheelDeltaX' in e) {\n      sX = -e.wheelDeltaX / 120;\n    } // side scrolling on FF with DOMMouseScroll\n\n\n    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\n      sX = sY;\n      sY = 0;\n    }\n\n    pX = sX * PIXEL_STEP;\n    pY = sY * PIXEL_STEP;\n\n    if ('deltaY' in e) {\n      pY = e.deltaY;\n    }\n\n    if ('deltaX' in e) {\n      pX = e.deltaX;\n    }\n\n    if (e.shiftKey && !pX) {\n      // if user scrolls with shift he wants horizontal scroll\n      pX = pY;\n      pY = 0;\n    }\n\n    if ((pX || pY) && e.deltaMode) {\n      if (e.deltaMode === 1) {\n        // delta in LINE units\n        pX *= LINE_HEIGHT;\n        pY *= LINE_HEIGHT;\n      } else {\n        // delta in PAGE units\n        pX *= PAGE_HEIGHT;\n        pY *= PAGE_HEIGHT;\n      }\n    } // Fall-back if spin cannot be determined\n\n\n    if (pX && !sX) {\n      sX = pX < 1 ? -1 : 1;\n    }\n\n    if (pY && !sY) {\n      sY = pY < 1 ? -1 : 1;\n    }\n\n    return {\n      spinX: sX,\n      spinY: sY,\n      pixelX: pX,\n      pixelY: pY\n    };\n  }\n\n  function handleMouseEnter() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = true;\n  }\n\n  function handleMouseLeave() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = false;\n  }\n\n  function animateSlider(newEvent) {\n    if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n      // Prevent if delta of wheel scroll delta is below configured threshold\n      return false;\n    }\n\n    if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n      // Prevent if time between scrolls is below configured threshold\n      return false;\n    } // If the movement is NOT big enough and\n    // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n    //   Don't go any further (avoid insignificant scroll movement).\n\n\n    if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {\n      // Return false as a default\n      return true;\n    } // If user is scrolling towards the end:\n    //   If the slider hasn't hit the latest slide or\n    //   if the slider is a loop and\n    //   if the slider isn't moving right now:\n    //     Go to next slide and\n    //     emit a scroll event.\n    // Else (the user is scrolling towards the beginning) and\n    // if the slider hasn't hit the first slide or\n    // if the slider is a loop and\n    // if the slider isn't moving right now:\n    //   Go to prev slide and\n    //   emit a scroll event.\n\n\n    if (newEvent.direction < 0) {\n      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n        swiper.slideNext();\n        emit('scroll', newEvent.raw);\n      }\n    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n      swiper.slidePrev();\n      emit('scroll', newEvent.raw);\n    } // If you got here is because an animation has been triggered so store the current time\n\n\n    lastScrollTime = new window.Date().getTime(); // Return false as a default\n\n    return false;\n  }\n\n  function releaseScroll(newEvent) {\n    const params = swiper.params.mousewheel;\n\n    if (newEvent.direction < 0) {\n      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n        // Return true to animate scroll on edges\n        return true;\n      }\n    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n      // Return true to animate scroll on edges\n      return true;\n    }\n\n    return false;\n  }\n\n  function handle(event) {\n    let e = event;\n    let disableParentSwiper = true;\n    if (!swiper.enabled) return;\n    const params = swiper.params.mousewheel;\n\n    if (swiper.params.cssMode) {\n      e.preventDefault();\n    }\n\n    let target = swiper.$el;\n\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      target = $(swiper.params.mousewheel.eventsTarget);\n    }\n\n    if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n\n    let delta = 0;\n    const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n    const data = normalize(e);\n\n    if (params.forceToAxis) {\n      if (swiper.isHorizontal()) {\n        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;\n      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;\n    } else {\n      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n    }\n\n    if (delta === 0) return true;\n    if (params.invert) delta = -delta; // Get the scroll positions\n\n    let positions = swiper.getTranslate() + delta * params.sensitivity;\n    if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\n    if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate(); // When loop is true:\n    //     the disableParentSwiper will be true.\n    // When loop is false:\n    //     if the scroll positions is not on edge,\n    //     then the disableParentSwiper will be true.\n    //     if the scroll on edge positions,\n    //     then the disableParentSwiper will be false.\n\n    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n    if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\n\n    if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n      // Register the new event in a variable which stores the relevant data\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta),\n        raw: event\n      }; // Keep the most recent events\n\n      if (recentWheelEvents.length >= 2) {\n        recentWheelEvents.shift(); // only store the last N events\n      }\n\n      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n      recentWheelEvents.push(newEvent); // If there is at least one previous recorded event:\n      //   If direction has changed or\n      //   if the scroll is quicker than the previous one:\n      //     Animate the slider.\n      // Else (this is the first time the wheel is moved):\n      //     Animate the slider.\n\n      if (prevEvent) {\n        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n          animateSlider(newEvent);\n        }\n      } else {\n        animateSlider(newEvent);\n      } // If it's time to release the scroll:\n      //   Return now so you don't hit the preventDefault.\n\n\n      if (releaseScroll(newEvent)) {\n        return true;\n      }\n    } else {\n      // Freemode or scrollContainer:\n      // If we recently snapped after a momentum scroll, then ignore wheel events\n      // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n      // or if it's a new scroll (larger delta or inverse sign as last event before\n      // an end-of-momentum snap).\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta)\n      };\n      const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n\n      if (!ignoreWheelEvents) {\n        lastEventBeforeSnap = undefined;\n\n        if (swiper.params.loop) {\n          swiper.loopFix();\n        }\n\n        let position = swiper.getTranslate() + delta * params.sensitivity;\n        const wasBeginning = swiper.isBeginning;\n        const wasEnd = swiper.isEnd;\n        if (position >= swiper.minTranslate()) position = swiper.minTranslate();\n        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\n        swiper.setTransition(0);\n        swiper.setTranslate(position);\n        swiper.updateProgress();\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n\n        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n          swiper.updateSlidesClasses();\n        }\n\n        if (swiper.params.freeMode.sticky) {\n          // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n          // the end of a momentum scroll by storing recent (N=15?) wheel events.\n          // 1. do all N events have decreasing or same (absolute value) delta?\n          // 2. did all N events arrive in the last M (M=500?) msecs?\n          // 3. does the earliest event have an (absolute value) delta that's\n          //    at least P (P=1?) larger than the most recent event's delta?\n          // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n          // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\n          // Snap immediately and ignore remaining wheel events in this scroll.\n          // See comment above for \"remaining wheel events in this scroll\" determination.\n          // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n          clearTimeout(timeout);\n          timeout = undefined;\n\n          if (recentWheelEvents.length >= 15) {\n            recentWheelEvents.shift(); // only store the last N events\n          }\n\n          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n          const firstEvent = recentWheelEvents[0];\n          recentWheelEvents.push(newEvent);\n\n          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n            recentWheelEvents.splice(0);\n          } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n            // We're at the end of the deceleration of a momentum scroll, so there's no need\n            // to wait for more events. Snap ASAP on the next tick.\n            // Also, because there's some remaining momentum we'll bias the snap in the\n            // direction of the ongoing scroll because it's better UX for the scroll to snap\n            // in the same direction as the scroll instead of reversing to snap.  Therefore,\n            // if it's already scrolled more than 20% in the current direction, keep going.\n            const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n            lastEventBeforeSnap = newEvent;\n            recentWheelEvents.splice(0);\n            timeout = nextTick(() => {\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 0); // no delay; move on next tick\n          }\n\n          if (!timeout) {\n            // if we get here, then we haven't detected the end of a momentum scroll, so\n            // we'll consider a scroll \"complete\" when there haven't been any wheel events\n            // for 500ms.\n            timeout = nextTick(() => {\n              const snapToThreshold = 0.5;\n              lastEventBeforeSnap = newEvent;\n              recentWheelEvents.splice(0);\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 500);\n          }\n        } // Emit event\n\n\n        if (!ignoreWheelEvents) emit('scroll', e); // Stop autoplay\n\n        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop(); // Return page scroll on edge positions\n\n        if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;\n      }\n    }\n\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    return false;\n  }\n\n  function events(method) {\n    let target = swiper.$el;\n\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      target = $(swiper.params.mousewheel.eventsTarget);\n    }\n\n    target[method]('mouseenter', handleMouseEnter);\n    target[method]('mouseleave', handleMouseLeave);\n    target[method]('wheel', handle);\n  }\n\n  function enable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.removeEventListener('wheel', handle);\n      return true;\n    }\n\n    if (swiper.mousewheel.enabled) return false;\n    events('on');\n    swiper.mousewheel.enabled = true;\n    return true;\n  }\n\n  function disable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.addEventListener(event, handle);\n      return true;\n    }\n\n    if (!swiper.mousewheel.enabled) return false;\n    events('off');\n    swiper.mousewheel.enabled = false;\n    return true;\n  }\n\n  on('init', () => {\n    if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n      disable();\n    }\n\n    if (swiper.params.mousewheel.enabled) enable();\n  });\n  on('destroy', () => {\n    if (swiper.params.cssMode) {\n      enable();\n    }\n\n    if (swiper.mousewheel.enabled) disable();\n  });\n  Object.assign(swiper.mousewheel, {\n    enable,\n    disable\n  });\n}"],"sourceRoot":""}