{"version":3,"sources":["webpack://modern-prestashop-build-tool/./node_modules/swiper/modules/thumbs/thumbs.js"],"names":[],"mappings":"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","file":"js/ce01181f4c6a1a5799c5.js","sourcesContent":["import { isObject } from '../../shared/utils.js';\nimport $ from '../../shared/dom.js';\nexport default function Thumb(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\n      thumbsContainerClass: 'swiper-thumbs'\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\n    let slideToIndex;\n\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n\n    if (swiper.params.loop) {\n      let currentIndex = swiper.activeIndex;\n\n      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\n        swiper.loopFix(); // eslint-disable-next-line\n\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n        currentIndex = swiper.activeIndex;\n      }\n\n      const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;\n    }\n\n    swiper.slideTo(slideToIndex);\n  }\n\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized) return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n    } else if (isObject(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n\n    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on('tap', onThumbClick);\n    return true;\n  }\n\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      let currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n\n      if (thumbsSwiper.params.loop) {\n        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\n          thumbsSwiper.loopFix(); // eslint-disable-next-line\n\n          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\n          currentThumbsIndex = thumbsSwiper.activeIndex;\n        } // Find actual thumbs index to slide to\n\n\n        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n\n        if (typeof prevThumbsIndex === 'undefined') {\n          newThumbsIndex = nextThumbsIndex;\n        } else if (typeof nextThumbsIndex === 'undefined') {\n          newThumbsIndex = prevThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = nextThumbsIndex;\n        } else {\n          newThumbsIndex = prevThumbsIndex;\n        }\n\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\n      }\n\n      if (useOffset) {\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {// newThumbsIndex = newThumbsIndex - slidesPerView + 1;\n        }\n\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n      }\n    } // Activate thumbs\n\n\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.removeClass(thumbActiveClass);\n\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).addClass(thumbActiveClass);\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);\n      }\n    }\n  }\n\n  on('beforeInit', () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper) return;\n    init();\n    update(true);\n  });\n  on('slideChange update resize observerUpdate', () => {\n    update();\n  });\n  on('setTransition', (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on('beforeDestroy', () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n\n    if (swiperCreated) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}"],"sourceRoot":""}